// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: greeter.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	UnaryHello(ctx context.Context, in *UnaryHelloRequest, opts ...grpc.CallOption) (*UnaryHelloResponse, error)
	ServerStreamingHello(ctx context.Context, in *ServerStreamingHelloRequest, opts ...grpc.CallOption) (Greeter_ServerStreamingHelloClient, error)
	ClientStreamingHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamingHelloClient, error)
	BidirectionalStreamingHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamingHelloClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) UnaryHello(ctx context.Context, in *UnaryHelloRequest, opts ...grpc.CallOption) (*UnaryHelloResponse, error) {
	out := new(UnaryHelloResponse)
	err := c.cc.Invoke(ctx, "/Greeter/UnaryHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ServerStreamingHello(ctx context.Context, in *ServerStreamingHelloRequest, opts ...grpc.CallOption) (Greeter_ServerStreamingHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/Greeter/ServerStreamingHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerStreamingHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerStreamingHelloClient interface {
	Recv() (*ServerStreamingHelloResponse, error)
	grpc.ClientStream
}

type greeterServerStreamingHelloClient struct {
	grpc.ClientStream
}

func (x *greeterServerStreamingHelloClient) Recv() (*ServerStreamingHelloResponse, error) {
	m := new(ServerStreamingHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ClientStreamingHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamingHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], "/Greeter/ClientStreamingHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientStreamingHelloClient{stream}
	return x, nil
}

type Greeter_ClientStreamingHelloClient interface {
	Send(*ClientStreamingHelloRequest) error
	CloseAndRecv() (*ClientStreamingHelloResponse, error)
	grpc.ClientStream
}

type greeterClientStreamingHelloClient struct {
	grpc.ClientStream
}

func (x *greeterClientStreamingHelloClient) Send(m *ClientStreamingHelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientStreamingHelloClient) CloseAndRecv() (*ClientStreamingHelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamingHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) BidirectionalStreamingHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamingHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], "/Greeter/BidirectionalStreamingHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterBidirectionalStreamingHelloClient{stream}
	return x, nil
}

type Greeter_BidirectionalStreamingHelloClient interface {
	Send(*BidirectionalStreamingHelloRequest) error
	Recv() (*BidirectionalStreamingHelloResponse, error)
	grpc.ClientStream
}

type greeterBidirectionalStreamingHelloClient struct {
	grpc.ClientStream
}

func (x *greeterBidirectionalStreamingHelloClient) Send(m *BidirectionalStreamingHelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamingHelloClient) Recv() (*BidirectionalStreamingHelloResponse, error) {
	m := new(BidirectionalStreamingHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	UnaryHello(context.Context, *UnaryHelloRequest) (*UnaryHelloResponse, error)
	ServerStreamingHello(*ServerStreamingHelloRequest, Greeter_ServerStreamingHelloServer) error
	ClientStreamingHello(Greeter_ClientStreamingHelloServer) error
	BidirectionalStreamingHello(Greeter_BidirectionalStreamingHelloServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) UnaryHello(context.Context, *UnaryHelloRequest) (*UnaryHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryHello not implemented")
}
func (UnimplementedGreeterServer) ServerStreamingHello(*ServerStreamingHelloRequest, Greeter_ServerStreamingHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingHello not implemented")
}
func (UnimplementedGreeterServer) ClientStreamingHello(Greeter_ClientStreamingHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingHello not implemented")
}
func (UnimplementedGreeterServer) BidirectionalStreamingHello(Greeter_BidirectionalStreamingHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_UnaryHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UnaryHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/UnaryHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UnaryHello(ctx, req.(*UnaryHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ServerStreamingHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerStreamingHello(m, &greeterServerStreamingHelloServer{stream})
}

type Greeter_ServerStreamingHelloServer interface {
	Send(*ServerStreamingHelloResponse) error
	grpc.ServerStream
}

type greeterServerStreamingHelloServer struct {
	grpc.ServerStream
}

func (x *greeterServerStreamingHelloServer) Send(m *ServerStreamingHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_ClientStreamingHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientStreamingHello(&greeterClientStreamingHelloServer{stream})
}

type Greeter_ClientStreamingHelloServer interface {
	SendAndClose(*ClientStreamingHelloResponse) error
	Recv() (*ClientStreamingHelloRequest, error)
	grpc.ServerStream
}

type greeterClientStreamingHelloServer struct {
	grpc.ServerStream
}

func (x *greeterClientStreamingHelloServer) SendAndClose(m *ClientStreamingHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientStreamingHelloServer) Recv() (*ClientStreamingHelloRequest, error) {
	m := new(ClientStreamingHelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_BidirectionalStreamingHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).BidirectionalStreamingHello(&greeterBidirectionalStreamingHelloServer{stream})
}

type Greeter_BidirectionalStreamingHelloServer interface {
	Send(*BidirectionalStreamingHelloResponse) error
	Recv() (*BidirectionalStreamingHelloRequest, error)
	grpc.ServerStream
}

type greeterBidirectionalStreamingHelloServer struct {
	grpc.ServerStream
}

func (x *greeterBidirectionalStreamingHelloServer) Send(m *BidirectionalStreamingHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamingHelloServer) Recv() (*BidirectionalStreamingHelloRequest, error) {
	m := new(BidirectionalStreamingHelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryHello",
			Handler:    _Greeter_UnaryHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingHello",
			Handler:       _Greeter_ServerStreamingHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingHello",
			Handler:       _Greeter_ClientStreamingHello_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingHello",
			Handler:       _Greeter_BidirectionalStreamingHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greeter.proto",
}
